/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/wNTX3nIGBc7
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo , useEffect} from "react"
import { Input } from "@/components/ui/input"
import { Card, CardHeader, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"

export function DashComp() {
/*   const [orders, setOrders] = useState([
    {
      "id": 1,
      "name": "Burger",
      "user_name": "Malo",
      "q_max": 10,
      "q_min": 1,
      "current_quantity": 3,
      "commentaries": "This is a commentary",
      "features": [
          {
              "name": "Steak",
              "type": "amount",
              "q_min": 1,
              "q_max": 2,
              "mandatory": true,
              "current_value": 1
          },
          {
              "name": "Cheese",
              "type": "list",
              "values": [
                  "Cheddar",
                  "Mozzarella",
                  "Gouda"
              ],
              "mandatory": false,
              "onlyone": true,
              "current_value": [
                  "Cheddar"
              ]
          },
          {
              "name": "Toppings",
              "type": "list",
              "values": [
                  "Lettuce",
                  "Tomato",
                  "Onion",
                  "Pickles",
                  "Jalapenos"
              ],
              "mandatory": false,
              "onlyone": false,
              "current_value": [
                  "Tomato",
                  "Onion"
              ]
          },
          {
              "name": "Sauces",
              "type": "list",
              "values": [
                  "Ketchup",
                  "Mustard",
                  "Mayo",
                  "BBQ"
              ],
              "mandatory": false,
              "onlyone": false,
              "current_value": [
                  "Mayo"
              ]
          }
      ]
  }
  ]) */

  const [orders, setOrders] = useState(null)
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await   fetch('/api/setorders', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ method:"getorder"})
        })
        const data = await response.json()
        setOrders(data)
        console.log("Orders fetched:", data)
      } catch (error) {
        console.error("Error fetching orders:", error)
      }
    }

    fetchOrders()
  }, [])
  
  const [selectedOrder, setSelectedOrder] :any= useState(null)
  const [inventory, setInventory] = useState({
    "Classic Burger": { current: 50, min: 20, max: 100 },
    "Veggie Burger": { current: 30, min: 10, max: 50 },
    "Bacon Cheeseburger": { current: 40, min: 15, max: 75 },
  })
  const [features, setFeatures] = useState([
    { name: "Cheese", min: 1, max: 3, mandatory: true },
    { name: "Lettuce", min: 0, max: 1, mandatory: false },
    { name: "Tomato", min: 0, max: 2, mandatory: false },
    { name: "Bacon", min: 0, max: 2, mandatory: false },
    { name: "Avocado", min: 0, max: 1, mandatory: false },
    { name: "Onion", min: 0, max: 1, mandatory: false },
  ])
/*   const [searchTerm, setSearchTerm] = useState("")
  const filteredOrders = useMemo(() => {
    return orders.filter(
      (order) =>
        order.customer.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.burger.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.status.toLowerCase().includes(searchTerm.toLowerCase()),
    )
  }, [orders, searchTerm]) */
  const handleOrderStatusUpdate = (orderId, newStatus) => {
    setOrders((prevOrders) =>
      prevOrders.map((order) => (order.id === orderId ? { ...order, status: newStatus } : order)),
    )
  }
  const handleInventoryUpdate = (burger, newQuantity) => {
    setInventory((prevInventory) => ({
      ...prevInventory,
      [burger]: { ...prevInventory[burger], current: newQuantity },
    }))
  }

  async function lowerQuantity(burgerid:any){
    console.log("running ct")
    try {
      const response = await   fetch('/api/setorders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ method:"decreasequantity", data: {id:burgerid}})
      })
      const data = await response.json()
      setOrders(data)
      console.log("Orders fetched:", data)
    } catch (error) {
      console.error("Error fetching orders:", error)
    }

  }

    const handleFeatureUpdate = (feature, newMin, newMax, newMandatory) => {
    setFeatures((prevFeatures) =>
      prevFeatures.map((f) => (f.name === feature ? { ...f, min: newMin, max: newMax, mandatory: newMandatory } : f)),
    )
  }
  return (
    <div className="flex flex-col h-full">
      <header className="bg-primary text-primary-foreground py-4 px-6">
        <h1 className="text-2xl font-bold">Burger Orders Dashboard</h1>
      </header>
      {orders &&  <main className="flex-1 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">

     
<section className="col-span-1 md:col-span-2 lg:col-span-3">
  <div className="flex items-center mb-4">
    <h2 className="text-xl font-bold flex-1">Order List</h2>
   {/*  <div className="relative flex-1 max-w-md">
      <div className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
      <Input
        type="search"
        placeholder="Search orders..."
        className="w-full rounded-lg bg-background pl-8"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />
    </div> */}
  </div>
  <div className="grid gap-4">
    {orders.map((order) => (
      <Card
        key={order.user_name}
        onClick={() => setSelectedOrder(order)}
        className={`cursor-pointer ${selectedOrder?.id === order.id ? "bg-accent/10" : ""}`}
      >
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="font-medium">{order.user_name}</div>
            {/* <Badge
              variant={
                order.status === "Pending" ? "warning" : order.status === "Completed" ? "success" : "danger"
              }
            >
              {order.status}
            </Badge> */}
               
          </div>
          <div className="">{order.commentaries}</div>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between">
            <div className="font-medium">{order.name}</div>
            <div>x{order.current_quantity}
         
            </div>
          </div> 

          <div className="flex items-center justify-between"> 
          <div className="text-muted-foreground text-sm">{order.features.map((feature):any => {
           
           
           return (<> <div className="flex"> 
           <strong className="text-black"> {`${feature.name}:`}</strong>
           {feature.type === "list" ? <div className="ml-2">{feature.current_value.join(", ")}</div> :<div className="ml-2">{feature.current_value}</div>}
           
           </div></>)
          })}</div>
          
          <button
type="button"
className="rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
onClick={() => lowerQuantity(order.id)}
>
Done 1 
</button></div>
        </CardContent>
      </Card>
    ))}
  </div>
</section>


</main>}
     
    </div>
  )
}

function ExpandIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m21 21-6-6m6 6v-4.8m0 4.8h-4.8" />
      <path d="M3 16.2V21m0 0h4.8M3 21l6-6" />
      <path d="M21 7.8V3m0 0h-4.8M21 3l-6 6" />
      <path d="M3 7.8V3m0 0h4.8M3 3l6 6" />
    </svg>
  )
}
